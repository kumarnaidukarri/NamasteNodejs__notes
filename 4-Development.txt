Project building :-
SDLC(software development life cycle)
Waterfall Model Stages : 
 1)Requirements gather:- product managers, designers gathers all requirements about project.                    
 2)Design:- senior engineers and techleads make "Design Document". 
            its about architecture, techstack, micro-services or monolith,
            High-level design, Low-level design.
 3)Development:- SDE1, SDE2, interns, junior developers. they also write test-cases(unit,endtoend).
 4)Testing:- Testing Team
 5)Deployment:- Devops engineer 
 6)Maintainance:- above 5 steps repeat again.

 note:- for startup companies mostly above all stages are done by developers only.    

Architecture :-
 1) Monolith:- 
             one big project at single repository.  
             everything is kept at same repository means frontend+backend+dbconnection+authenticate+analytics.    
 2) Microservices:-
             service also called as project/product/application.
             one micro-service for front-end. another service for back-end. another one for analytics, authenticate so on.
             basically Multiple teams build multiple products. At end, all these products will communicate work together.

Differences Monolith vs Micro-servies:-
 i)dev speed - slower ::: faster
 ii)code repository - single ::: multiple
 iii)scalability -  Difficult scale ::: easy scale independently
 iv)Deployment - small change happen whole project deploy ::: version mismatch issues
 v)Tech stack -  stick to one stack ::: can use different stack for each micro-service 
 vi)Infra cost - cheap ::: expensive
 vii)complexity - high ::: low 
 viii)fault isolation - whole product fail ::: specific service fail
 ix)Testing - easy ::: difficult since multiple micro-services. 
 x)Ownership - some people ::: multiple teams  
 xi)maintainence - difficult ::: easy, since different micro-services
 xii)debugging - tough ::: easy  
 xiii)dev experience


LLD(Low-Level-Design):-
     Database Design, API Design


-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------

Application "Dev Tinder" :- 
 it is a platform for developers to make connections. 
 Features: create account, login, update profile, feedpage-explore
           send connection request, see our matches, 
           see the sent/recieved requests.

node-modules :- this is where all our project dependency files are stored.
                each dependency might need other dependency.
package.json :- this file contains basic metadata about our project. 
                '^' carot means auto updates minorversion and patch. Ex:"^4.x.x" 
                '~' tilda means auto updates patch versions only.    Ex:"~4.19.x"
                4.19.2 means majorversion. minorversion. patch.
                majorversion means breaking changes, no backward compatible.
                minorversion means minor change, new features, backward compatible.
                patch means small change, bugfix.

package-lock.json :- this file contains meta data about project.
                     it stores "Exact Versions of dependencies" installed in project.
                     It locks the versions of dependencies for consistent project setup across different environments,
                     such as development and production environments.   

Nodemon :- tool helps in start server, auto update reload.
           global install: npm install nodemon -g 
           developer install: npm install nodemon --save-dev 
           run server:        npx nodemon index.js 

Express JS :- simple Web framework used to create servers.
              command: npm install express
    code:
         const express = require("express");
         const app = new express();

         app.use("/home", (req, res) => {
           res.send("home from server");
         });
         app.use("/test", (req, res) => {
           res.send("test from server");
         });

         app.listen(3000, function () {
           console.log("Server listening on port 3000 ...");
         });
